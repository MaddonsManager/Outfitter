﻿if GetLocale() == "deDE" then
	Outfitter.cTitle = "Outfitter"
	Outfitter.cTitleVersion = Outfitter.cTitle.." "..Outfitter.cVersion

	Outfitter.cSingleItemFormat = "%s"
	Outfitter.cTwoItemFormat = "%s und %s"
	Outfitter.cMultiItemFormat = "%s{{, %s}} und %s"
	
	Outfitter.cNameLabel = "Name:"
	Outfitter.cCreateUsingTitle = "Optimieren für:"
	Outfitter.cUseCurrentOutfit = "Benutze derzeitiges Outfit"
	Outfitter.cUseEmptyOutfit = "Erstelle neues Outfit"

	Outfitter.cOutfitterTabTitle = "Outfitter"
	Outfitter.cOptionsTabTitle = "Einstellungen"
	Outfitter.cAboutTabTitle = "über"

	Outfitter.cNewOutfit = "Neues Outfit"
	Outfitter.cRenameOutfit = "Outfit umbenennen"

	Outfitter.cCompleteOutfits = "Vollständige Ausrüstungen"
	Outfitter.cPartialOutfits = "Mix-n-match"
	Outfitter.cAccessoryOutfits = "Zusatzgegenstände"
	Outfitter.cSpecialOutfits = "Besondere Gelegenheiten"

	Outfitter.cGlobalCategory = "Special Outfits"
	Outfitter.cNormalOutfit = "Normal"
	Outfitter.cNakedOutfit = "Unbekleidet"

	Outfitter.cFishingOutfit = "Angeln"
	Outfitter.cHerbalismOutfit = "Kräuterkunde"
	Outfitter.cMiningOutfit = "Bergbau"
	Outfitter.cLockpickingOutfit = "Lockpicking"
	Outfitter.cSkinningOutfit = "Kürschnerei"
	Outfitter.cFireResistOutfit = "Feuerwiderstand"
	Outfitter.cNatureResistOutfit = "Naturwiderstand"
	Outfitter.cShadowResistOutfit = "Schattenwiderstand"
	Outfitter.cArcaneResistOutfit = "Arkanwiderstand"
	Outfitter.cFrostResistOutfit = "Frostwiderstand"

	Outfitter.cArgentDawnOutfit = "Argentumdämmerung"
	Outfitter.cRidingOutfit = "Reiten"
	Outfitter.cDiningOutfit = "Ausruhen"
	Outfitter.cBattlegroundOutfit = "Schlachtfeld"
	Outfitter.cArgentTournamentOutfit = "Argent Tournament"
	Outfitter.cMultiphaseSurveyOutfit = "The Multiphase Survey"
	Outfitter.cSpellcastOutfit = "Spellcast"
	
	Outfitter.cABOutfit = "Schlachtfeld: Arathibecken"
	Outfitter.cAVOutfit = "Schlachtfeld: Alteractal"
	Outfitter.cWSGOutfit = "Schlachtfeld: Kriegshymnenschlucht"
	Outfitter.cEotSOutfit = "Schlachtfeld: Auge des Sturms"
	Outfitter.cCityOutfit = "Stadt"
	Outfitter.cSwimmingOutfit = "Schwimmen"
	
	Outfitter.cMountSpeedFormat = "Erhöht %w+empo um %d+%%"; -- For detecting when mounted
	Outfitter.cFlyingMountSpeedFormat = "Erhöht Fluggeschwindigkeit um (%d+)%%%."; -- For detecting when mounted
	
	Outfitter.cBagsFullError = "%s kann nicht enfernt werden da alle Taschen voll sind."
	Outfitter.cItemNotFoundError = "Kann %s nicht finden."
	Outfitter.cAddingItem = "Füge %s zum %s Outfit."
	Outfitter.cNameAlreadyUsedError = "Fehler: Dieser Name ist bereits vergeben."
	Outfitter.cNoItemsWithStatError = "Warnung: Keiner deiner Gegenstände hat dieses Attribut."

	Outfitter.cEnableAll = "Alle aktivieren"
	Outfitter.cEnableNone = "Alle deaktivieren"

	Outfitter.cConfirmDeleteMsg = "Bist du sicher dass du das %s Outfit löschen willst?"
	Outfitter.cConfirmRebuildMsg = "Bist du sicher dass du das %s Outfit verändern willst?"
	Outfitter.cRebuild = "Verändern"

	Outfitter.cSilverwingHold = "Silverwing Hold"
	Outfitter.cWarsongLumberMill = "Warsong Lumber Mill"

	Outfitter.cTotalStatsName = "Gesamt	werte"
	Outfitter.cItemLevelName = "Item Level"
	
	Outfitter.cOptionsTitle = "Outfitter Einstellungen"
	Outfitter.cShowMinimapButton = "Zeige Minimapbutton"
	Outfitter.cShowMinimapButtonOnDescription = "Deaktivieren, um den Minimapbutton von Outfitter zu verstecken."
	Outfitter.cShowMinimapButtonOffDescription = "Aktivieren, um den Minimapbutton von Outfitter zu zeigen."

	Outfitter.cAutoSwitch = "Outfit nicht automatisch umschalten"
	Outfitter.cAutoSwitchOnDescription = "Abschalten um automatische Outfitwechsel zu aktivieren."
	Outfitter.cAutoSwitchOffDescription = "Einschalten, um automatische Outfitwechsel zu deaktivieren."
 	Outfitter.cTooltipInfo = "Tooltips anzeigen"
	Outfitter.cTooltipInfoOnDescription = "Abschalten, um 'Benutzt von:' in Tooltips zu verstecken. (Verbessert die Frame-Rate geringfügig)"
	Outfitter.cTooltipInfoOffDescription = "Einschalten, um 'Benutzt von:' in Tooltips anzuzeigen."
	Outfitter.cOutfitDisplay = "Outfit display"

	Outfitter.cAboutTitle = "über Outfitter"
	Outfitter.cAuthor = "Designed and written by John Stephen with contributions by %s"
	Outfitter.cTestersTitle = "Outfitter testers"
	Outfitter.cTestersNames = "%s"
	Outfitter.cSpecialThanksTitle = "Besonderen Dank für ihre Unterstützung geht an"
	Outfitter.cSpecialThanksNames = "%s"
	Outfitter.cTranslationCredit = "Übersetzung: %s"
	Outfitter.cURL = "wobbleworks.com"

	Outfitter.cOpenOutfitter = "Outfitter öffnen"

	Outfitter.cArgentDawnOutfitDescription = "Dieses Outfit wird automatisch beim Betreten der Pestländer angelegt"
	Outfitter.cRidingOutfitDescription = "Dieses Outfit wird automatisch beim Reiten angelegt"
	Outfitter.cDiningOutfitDescription = "Dieses Outfit wird automatisch beim Essen und/oder Trinken angelegt"
	Outfitter.cBattlegroundOutfitDescription = "Dieses Outfit wird automatisch beim Betreten eines Schlachtfeldes angelegt"
	Outfitter.cArathiBasinOutfitDescription = "Dieses Outfit wird automatisch beim Betreten des Arathibeckens angelegt"
	Outfitter.cAlteracValleyOutfitDescription = "Dieses Outfit wird automatisch beim Betreten des Alteractals angelegt"
	Outfitter.cWarsongGulchOutfitDescription = "Dieses Outfit wird automatisch beim Betreten der Kriegshymnenschlucht angelegt"
	Outfitter.cEotSOutfitDescription = "Dieses Outfit wird automatisch beim Betreten des Auge des Sturms angelegt"
	Outfitter.cCityOutfitDescription = "Dieses Outfit wird automatisch beim Betreten freundlicher Hauptstädte angelegt"

	Outfitter.cKeyBinding = "Tastaturbelegung"

	BINDING_HEADER_OUTFITTER_TITLE = Outfitter.cTitle

	BINDING_NAME_OUTFITTER_OUTFIT1  = "Outfit 1"
	BINDING_NAME_OUTFITTER_OUTFIT2  = "Outfit 2"
	BINDING_NAME_OUTFITTER_OUTFIT3  = "Outfit 3"
	BINDING_NAME_OUTFITTER_OUTFIT4  = "Outfit 4"
	BINDING_NAME_OUTFITTER_OUTFIT5  = "Outfit 5"
	BINDING_NAME_OUTFITTER_OUTFIT6  = "Outfit 6"
	BINDING_NAME_OUTFITTER_OUTFIT7  = "Outfit 7"
	BINDING_NAME_OUTFITTER_OUTFIT8  = "Outfit 8"
	BINDING_NAME_OUTFITTER_OUTFIT9  = "Outfit 9"
	BINDING_NAME_OUTFITTER_OUTFIT10 = "Outfit 10"
	
	Outfitter.cShow = "Anzeigen"
	Outfitter.cHide = "Verstecken"
	Outfitter.cDontChange = "Don't change"
	
	Outfitter.cHelm = "Helm"
	Outfitter.cCloak = "Umhang"
	Outfitter.cPlayerTitle = "Title"

	Outfitter.cMore = "More"
	
	Outfitter.cAutomation = "Automation"
	
	Outfitter.cDisableOutfit = "Outfit abschalten"
	Outfitter.cDisableOutfitInBG = "Outfit beim Betreten eines Schlachtfeldes abschalten."
	Outfitter.cDisabledOutfitName = "%s (Abgeschalten)"

	Outfitter.cOutfitBar = "Outfit Bar"
	Outfitter.cShowInOutfitBar = "Show in outfit bar"
	Outfitter.cChangeIcon = "Choose icon..."

	Outfitter.cMinimapButtonTitle = "Outfitter Minimapbutton"
	Outfitter.cMinimapButtonDescription = "Klicken für eine Auswahl an Outfits oder gedrückt halten zum Bewegen des Buttons."

	Outfitter.cClassName.DRUID = "Druide"
	Outfitter.cClassName.HUNTER = "Jäger"
	Outfitter.cClassName.MAGE = "Magier"
	Outfitter.cClassName.PALADIN = "Paladin"
	Outfitter.cClassName.PRIEST = "Priester"
	Outfitter.cClassName.ROGUE = "Schurke"
	Outfitter.cClassName.SHAMAN = "Schamane"
	Outfitter.cClassName.WARLOCK = "Hexenmeister"
	Outfitter.cClassName.WARRIOR = "Krieger"

	Outfitter.cBattleStance = "Kampfhaltung"
	Outfitter.cDefensiveStance = "Verteidigungshaltung"
	Outfitter.cBerserkerStance = "Berserkerhaltung"

	Outfitter.cWarriorBattleStance = "Krieger: Kampfhaltung"
	Outfitter.cWarriorDefensiveStance = "Krieger: Verteidigungshaltung"
	Outfitter.cWarriorBerserkerStance = "Krieger: Berserkerhaltung"

	Outfitter.cDruidBearForm = "Druide: Bärengestalt"
	Outfitter.cDruidCatForm = "Druide: Katzengestalt"
	Outfitter.cDruidAquaticForm = "Druide: Wassergestalt"
	Outfitter.cDruidFlightForm = "Druide: Fluggestalt"
	Outfitter.cDruidSwiftFlightForm = "Druide: Schnelle Fluggestalt"
	Outfitter.cDruidTravelForm = "Druide: Reisegestalt"
	Outfitter.cDruidMoonkinForm = "Druide: Mondkingestalt"
	Outfitter.cDruidProwl = "Druide: Prowl"
	Outfitter.cDruidTreeOfLifeForm = "Druide: Baum des Lebens";	
	Outfitter.cProwl = "Pirschen"

	Outfitter.cPriestShadowform = "Priester: Schattengestalt"

	Outfitter.cRogueStealth = "Schurke: Verstohlenheit"

	Outfitter.cShamanGhostWolf = "Schamane: Geisterwolf"

	Outfitter.cHunterMonkey = "Jäger: Affe"
	Outfitter.cHunterHawk =  "Jäger: Falke"
	Outfitter.cHunterCheetah =  "Jäger: Gepard"
	Outfitter.cHunterPack =  "Jäger: Rudel"
	Outfitter.cHunterBeast =  "Jäger: Wildtier"
	Outfitter.cHunterWild =  "Jäger: Wildnis"

	Outfitter.cMageEvocate = "Magier: Hervorrufung"

	Outfitter.cCompleteCategoryDescription = "Vollständige Outfits haben für jeden Inventarslot festgelegte Gegenstände, die alles andere ersetzen wenn sie getragen werden."
	Outfitter.cPartialCategoryDescription = "Bei Mix-n-match Outfits sind nur einige Gegenstände festgelegt, jedoch nicht alle.  Werden diese Outfits ausgewählt bleibt das vorherige Outfit erhalten, nur die neuen Gegenstände werden geändert."
	Outfitter.cAccessoryCategoryDescription = "Zusatzgegenstände-Outfits haben nur einige festgelegte Inventarslots.  Anders als beim Mix-n-match kannst du so viele Zusatzgegenstände-Outfits erstellen und tragen, sie werden alle miteinander verbunden und über bestehenden Outfits getragen."
	Outfitter.cSpecialCategoryDescription = "Besondere Gelegenheit-Outfits werden automatisch angelegt wenn die Situation es verlangt.  Sie werden über allen anderen Outfits getragen."
	Outfitter.cOddsNEndsCategoryDescription = "Odds 'n ends ist eine Auflistung der Gegenstände, die keinem Outfit zugewiesen sind. Mit dieser Funktion kannst du sicherstellen, dass alle Gegenstände ihren Platz haben oder dass du keine unnötigen Gegenstände mit dir herumträgst."
	
	Outfitter.cRebuildOutfitFormat = "%s geändert."
	
	Outfitter.cSlotEnableTitle = "Slot aktivieren"
	Outfitter.cSlotEnableDescription = "Aktiviere diese Option, damit der Gegenstand in diesem Slot automatisch angelegt wird wenn du zu diesem Outfit wechselst.  Ist dieser Slot nicht aktiviert, wird er beim Anlegen eines anderen Outfits nicht verändert."
	
	Outfitter.cFinger0SlotName = "Erster Finger"
	Outfitter.cFinger1SlotName = "Zweiter Finger"
	
	Outfitter.cTrinket0SlotName = "Erstes Schmuckstück"
	Outfitter.cTrinket1SlotName = "Zweites Schmuckstück"
	
	Outfitter.cOutfitCategoryTitle = "Kategorie"
	Outfitter.cBankCategoryTitle = "Bank"
	Outfitter.cDepositToBank = "Gegenstände im Bankfach ablegen"
	Outfitter.cDepositUniqueToBank = "Einzigartige Gegenstände im Bankfach ablegen"
	Outfitter.cDepositOthersToBank = "Deposit other outfits to bank"
	Outfitter.cWithdrawFromBank = "Gegenstände vom Bankfach aufnehmen"
	Outfitter.cWithdrawOthersFromBank = "Withdraw other outfits from bank"
	
	Outfitter.cMissingItemsLabel = "Fehlende Gegenstände: "
	Outfitter.cBankedItemsLabel = "Gegenstände auf der Bank: "

	Outfitter.cResistCategory = "Widerstände"
	Outfitter.cTradeCategory = "Fähigkeiten"
	
	Outfitter.cScript = "Script"
	Outfitter.cDisableScript = "Script abschalten"
	Outfitter.cEditScript = "Script bearbeiten"
	Outfitter.cEventsLabel = "Ereignisse:"
	Outfitter.cScriptLabel = "Script:"

	Outfitter.cSetCurrentItems = "Mit aktuellem Outfit überschreiben"
	Outfitter.cConfirmSetCurrentMsg = "Wollt ihr %s wirklich mit den zur Zeit angelegten Gegenständen überschreiben? Hinweis: Nur aktive Slots werden berücksichtigt. Zusätzliche Slots können später hinzugefügt werden"
	Outfitter.cSetCurrent = "Aktualisieren"
	Outfitter.cTyping = "Schreibe..."
	Outfitter.cScriptErrorFormat = "Fehler in Zeile %d: %s"
	Outfitter.cExtractErrorFormat = "%[string \"Outfit Script\"%]:(%d+):(.*)"
	Outfitter.cPresetScript = "Vorgefertigtes Script:"
	Outfitter.cCustomScript = "Benutzerdefiniert"
	Outfitter.cSettings = "Einstellungen"
	Outfitter.cSource = "Quellcode"
	Outfitter.cInsertFormat = "<- %s"
	
	Outfitter.cNone = "Keins"
	
	Outfitter.cUseTooltipLineFormat = "^Benutzen:.*"
	Outfitter.cUseDurationTooltipLineFormat = "^Benutzen:.*(%d+) Sek%. lang"
	Outfitter.cUseDurationTooltipLineFormat2 = "^Benutzen:.*(%d+) Sek%. lang"
	
	Outfitter.cAutoChangesDisabled = "Automated changes are now disabled"
	Outfitter.cAutoChangesEnabled = "Automated changes are now enabled"
	
	-- OutfitterFu strings

	Outfitter.cFuHint = "Left-click to toggle Outfitter window."
	Outfitter.cFuHideMissing = "Hide missing"
	Outfitter.cFuHideMissingDesc = "Hide outfits with missing items."
	Outfitter.cFuRemovePrefixes = "Remove prefixes"
	Outfitter.cFuRemovePrefixesDesc = "Remove outfit name prefixes to shorten the text displayed in FuBar."
	Outfitter.cFuMaxTextLength = "Max text length"
	Outfitter.cFuMaxTextLengthDesc = "The maximum length of the text displayed in FuBar."
	Outfitter.cFuHideMinimapButton = "Hide minimap button"
	Outfitter.cFuHideMinimapButtonDesc = "Hide Outfitter's minimap button."
	Outfitter.cFuInitializing = "Initializing"

	Outfitter.cStoreOnServer = "Store outfit on server"
	Outfitter.cStoreOnServerOnDescription = "Turn off to remove this outfit from the server and store it locally instead.  It will no longer be available from other computers."
	Outfitter.cStoreOnServerOffDescription = "Turn on to store this outfit on the server so that it's available from any computer.  You may only store 10 outfits on the server."
	Outfitter.cTooManyServerOutfits = "You cannot store more than %d outfits on the server."
end
