﻿Outfitter.cVersion = "5.0b8"

Outfitter.cTitle = "Outfitter"
Outfitter.cTitleVersion = Outfitter.cTitle.." "..Outfitter.cVersion

Outfitter.cSingleItemFormat = "%s"
Outfitter.cTwoItemFormat = "%s and %s"
Outfitter.cMultiItemFormat = "%s{{, %s}} and %s"

Outfitter.cInfo = "Info"
Outfitter.cBuild = "Build"
Outfitter.cStats = "Stats"

Outfitter.cNameLabel = "Name:"
Outfitter.cCreateUsingTitle = "Generate Outfit"
Outfitter.cUseCurrentOutfit = "Use Current Outfit"
Outfitter.cUseEmptyOutfit = "Create Empty Outfit"
Outfitter.cAutomationLabel = "Automation:"

Outfitter.cOutfitterTabTitle = "Outfitter"
Outfitter.cOptionsTabTitle = "Options"
Outfitter.cAboutTabTitle = "About"

Outfitter.cNewOutfit = "New Outfit"
Outfitter.cRenameOutfit = "Rename Outfit"

Outfitter.cCompleteOutfits = "Complete outfits"
Outfitter.cAccessoryOutfits = "Accessories"
Outfitter.cOddsNEndsOutfits = "Odds 'n ends"

Outfitter.cGlobalCategory = "Special Outfits"
Outfitter.cNormalOutfit = "Normal"
Outfitter.cNakedOutfit = "Birthday Suit"

Outfitter.cScriptCategoryName = {}
Outfitter.cScriptCategoryName.PVP = "PvP"
Outfitter.cScriptCategoryName.TRADE = "Activities"
Outfitter.cScriptCategoryName.GENERAL = "General"
Outfitter.cScriptCategoryName.QUEST = "Questing"
Outfitter.cScriptCategoryName.ENTERTAIN = "Entertainment"

Outfitter.cArgentDawnOutfit = "Argent Dawn"
Outfitter.cCityOutfit = "Around Town"
Outfitter.cBattlegroundOutfit = "Battleground"
Outfitter.cAVOutfit = "Battleground: Alterac Valley"
Outfitter.cABOutfit = "Battleground: Arathi Basin"
Outfitter.cArenaOutfit = "Battleground: Arena"
Outfitter.cEotSOutfit = "Battleground: Eye of the Storm"
Outfitter.cWSGOutfit = "Battleground: Warsong Gulch"
Outfitter.cSotAOutfit = "Battleground: Strand of the Ancients"
Outfitter.cIoCOutfit = "Battleground: Isle of Conquest"
Outfitter.cDiningOutfit = "Dining"
Outfitter.cFishingOutfit = "Fishing"
Outfitter.cHerbalismOutfit = "Herbalism"
Outfitter.cMiningOutfit = "Mining"
Outfitter.cFireResistOutfit = "Resist: Fire"
Outfitter.cNatureResistOutfit = "Resist: Nature"
Outfitter.cShadowResistOutfit = "Resist: Shadow"
Outfitter.cArcaneResistOutfit = "Resist: Arcane"
Outfitter.cFrostResistOutfit = "Resist: Frost"
Outfitter.cRidingOutfit = "Riding"
Outfitter.cSkinningOutfit = "Skinning"
Outfitter.cSwimmingOutfit = "Swimming"
Outfitter.cLowHealthOutfit = "Low Health or Mana"
Outfitter.cHasBuffOutfit = "Has Buff"
Outfitter.cHasDebuffOutfit = "Has Debuff"
Outfitter.cInZonesOutfit = "In Zones"
Outfitter.cSoloOutfit = "Solo/Party/Raid"
Outfitter.cFallingOutfit = "Falling"
Outfitter.cPvPFlaggedOutfit = "PvP Flagged"
Outfitter.cInDungeonOutfit = "In Dungeon"
Outfitter.cArgentTournamentOutfit = "Argent Tournament"
Outfitter.cMultiphaseSurveyOutfit = "The Multiphase Survey"
Outfitter.cSpellcastOutfit = "Spellcast"
Outfitter.cRestingOutfit = "Resting"
Outfitter.cFlameLeviathanOutfit = "Flame Leviathan"

Outfitter.cArgentDawnOutfitDescription = "Equips the outfit when you're in the Plaguelands"
Outfitter.cRidingOutfitDescription = "Equips the outfit when you're mounted"
Outfitter.cDiningOutfitDescription = "Equips the outfit when you're eating or drinking until your health/mana are above 90%"
Outfitter.cBattlegroundOutfitDescription = "Equips the outfit when you're in any battleground"
Outfitter.cArathiBasinOutfitDescription = "Equips the outfit when you're in the Arathi Basin battleground"
Outfitter.cAlteracValleyOutfitDescription = "Equips the outfit when you're in in the Alterac Valley battleground"
Outfitter.cWarsongGulchOutfitDescription = "Equips the outfit when you're in the Warsong Gulch battleground"
Outfitter.cEotSOutfitDescription = "Equips the outfit when you're in the Eye of the Storm battleground"
Outfitter.cSotAOutfitDescription = "Equips the outfit when you're in the Strand of the Ancients battleground"
Outfitter.cIoCOutfitDescription = "Equips the outfit when you're in the Isle of Conquest battleground"
Outfitter.cArenaOutfitDescription = "Equips the outfit when you're in a PvP Arena"
Outfitter.cCityOutfitDescription = "Equips the outfit when you're in a friendly major city"
Outfitter.cSwimmingOutfitDescription = "Equips the outfit when you're swimming"
Outfitter.cFishingOutfitDescription = "Unequips the outfit if you enter combat, then requips it afterwards."
Outfitter.cSpiritOutfitDescription = "Equips the outfit when you're regenerating mana (out of the five-second rule)"
Outfitter.cHerbalismDescription = "Equips the outfit when your cursor is over an herb node that is orange or red to you"
Outfitter.cMiningDescription = "Equips the outfit when your cursor is over a mining node that is orange or red to you"
Outfitter.cLockpickingDescription = "Equips the outfit when your cursor is over a lock that is orange or red to you"
Outfitter.cSkinningDescription = "Equips the outfit when your cursor is over a skinnable creature that is orange or red to you"
Outfitter.cLowHealthDescription = "Equips the outfit when your health or mana go below the specified values"
Outfitter.cHasBuffDescription = "Equips the outfit when you have a buff with the specified name"
Outfitter.cHasDebuffDescription = "Equips the outfit when you have a debuff with the specified name"
Outfitter.SpiritRegenOutfitDescription = "Equips the outfit when you are regenerating mana (out of the five-second rule)"
Outfitter.cDruidCasterFormDescription = "Equips the outfit when you are not in any druid form"
Outfitter.cPriestShadowformDescription = "Equips the outfit when you are in shadow form"
Outfitter.cShamanGhostWolfDescription = "Equips the outfit when you are in ghost wolf form"
Outfitter.cHunterMonkeyDescription = "Equips the outfit when you are in Monkey aspect"
Outfitter.cHunterHawkDescription = "Equips the outfit when you are in Hawk aspect"
Outfitter.cHunterCheetahDescription = "Equips the outfit when you are in Cheetah aspect"
Outfitter.cHunterPackDescription = "Equips the outfit when you are in Pack aspect"
Outfitter.cHunterBeastDescription = "Equips the outfit when you are in Beast aspect"
Outfitter.cHunterWildDescription = "Equips the outfit when you are in Wild aspect"
Outfitter.cHunterViperDescription = "Equips the outfit when you are in Viper aspect"
Outfitter.cHunterDragonhawkDescription = "Equips the outfit when you are in Dragonhawk aspect"
Outfitter.cHunterFeignDeathDescription = "Equips the outfit when you are feigning death"
Outfitter.cMageEvocateDescription = "Equips the outfit when you are evocating"
Outfitter.cWarriorBerserkerStanceDescription = "Equips the outfit when you are in Berserker stance"
Outfitter.cWarriorDefensiveStanceDescription = "Equips the outfit when you are in Defensive stance"
Outfitter.cWarriorBattleStanceDescription = "Equips the outfit when you are in Battle stance"
Outfitter.cInZonesOutfitDescription = "Equips the outfit when you are in one of the zones or minimap sub-zones listed below"
Outfitter.cSoloOutfitDescription = "Equips the outfit when solo, partied or raiding, based on the settings"
Outfitter.cFallingOutfitDescription = "Equips the outfit when you're falling"
Outfitter.cPvPFlaggedDescription = "Equips the outfit when you're PvP-flagged"
Outfitter.cInDungeonDescription = "Equips the outfit when you're in a dungeon, raid, or battleground instance based on the settings"
Outfitter.cArgentTournamentOutfitDescription = "Equips the outfit when you mouse over an Argent Tournament mount, unequips it when you exit the vehicle"
Outfitter.cRestingOutfitDescription = "Equips the outfit when you're in an inn"
Outfitter.cFlameLeviathanOutfitDescription = "Equips the outfit when you enter a Flame Leviathan encounter vehicle, unequips it when you exit and combat is ended"

Outfitter.cMountSpeedFormat = "Increases speed by (%d+)%%%."; -- For detecting when mounted
Outfitter.cFlyingMountSpeedFormat = "Increases flight speed by (%d+)%%%."; -- For detecting when mounted

Outfitter.cBagsFullError = "Can't remove %s because all bags are full"
Outfitter.cDepositBagsFullError = "Can't deposit %s because all bank bags are full"
Outfitter.cWithdrawBagsFullError = "Can't withdraw %s because all bags are full"
Outfitter.cItemNotFoundError = "Can't find item %s"
Outfitter.cItemAlreadyUsedError = "Can't put %s in the %s slot because it's already being used in another slot"
Outfitter.cAddingItem = "Adding %s to %s outfit"
Outfitter.cNameAlreadyUsedError = "Error: That name is already being used"
Outfitter.cNoItemsWithStatError = "Warning: None of your items have that attribute"
Outfitter.cCantUnequipCompleteError = "Can't unequip %s because complete outfits can't be unequipped (you must equip a different complete outfit instead)"

Outfitter.cEnableAll = "Enable all"
Outfitter.cEnableNone = "Enable none"

Outfitter.cConfirmDeleteMsg = "Are you sure you want to delete the outfit %s?"
Outfitter.cConfirmRebuildMsg = "Are you sure you want to rebuild the outfit %s?"
Outfitter.cRebuild = "Rebuild"

Outfitter.cSilverwingHold = "Silverwing Hold"
Outfitter.cWarsongLumberMill = "Warsong Lumber Mill"

Outfitter.cTotalStatsName = "Total Stats"
Outfitter.cItemLevelName = "Item Level"

Outfitter.cCombatManaRegenStatName = "Mana per 5 (combat)"
Outfitter.cCombatHealthRegenStatName = "Health per 5 (combat)"

Outfitter.cOptionsTitle = "Outfitter Options"
Outfitter.cShowMinimapButton = "Show Minimap Button"
Outfitter.cShowMinimapButtonOnDescription = "Turn this off if you don't want the Outfitter button on your minimap cluster"
Outfitter.cShowMinimapButtonOffDescription = "Turn this on if you want the Outfitter button on your minimap cluster"
Outfitter.cAutoSwitch = "Disable automatic changes"
Outfitter.cAutoSwitchOnDescription = "Turn this off to enable automatic outfit switching"
Outfitter.cAutoSwitchOffDescription = "Turn this on to disable automatic outfit switching"
Outfitter.cTooltipInfo = "Show 'Used by:' in tooltips"
Outfitter.cTooltipInfoOnDescription = "Turn this off if you experience performance problems when mousing over equippable items"
Outfitter.cTooltipInfoOffDescription = "Turn this on if you want to display 'Used By:' information in Tooltip"
Outfitter.cItemComparisons = "Show in item comparisons"
Outfitter.cItemComparisonsOnDescription = "Turn this off to only include your equipped items in item comparisons"
Outfitter.cItemComparisonsOffDescription = "Turn this on to include items from your outfits in tooltip item comparisons"
Outfitter.cOutfitDisplay = "Outfit display"
Outfitter.cShowHotkeyMessages = "Show outfit change messages"
Outfitter.cShowHotkeyMessagesOnDescription = "Turn this off if you don't want to see a message when you change outfits using a key binding"
Outfitter.cShowHotkeyMessagesOffDescription = "Turn this on if you want to see a message when you change outfits using a key binding"
Outfitter.cShowOutfitBar = "Show outfit bar"
Outfitter.cShowOutfitBarDescription = "Shows a bar of icon buttons you can click to change outfits"
Outfitter.cEquipOutfitMessageFormat = "Outfitter: %s equipped"
Outfitter.cUnequipOutfitMessageFormat = "Outfitter: %s unequipped"

Outfitter.cAboutTitle = "About Outfitter %s"
Outfitter.cAboutAuthor = "Designed and written by John Stephen"
Outfitter.cAboutCopyright = "Copyright 2009, 2010 John Stephen, wobbleworks.com"
Outfitter.cAboutThanks = "Many thanks to all fans and supporters."

Outfitter.cGermanLocalization = "German Localization"
Outfitter.cChineseLocalization = "Chinese Localization"
Outfitter.cFrenchLocalization = "French Localization"
Outfitter.cSpanishLocalization = "Spanish Localization"
Outfitter.cRussianLocalization = "Russian Localization"
Outfitter.cKoreanLocalization = "Korean Localization"
Outfitter.cContributingDeveloper = "Contributing Developer"
Outfitter.cTester = "Tester"
Outfitter.cGuildCreditFormat = "The guild of %s"

Outfitter.cOpenOutfitter = "Open Outfitter"

Outfitter.cKeyBinding = "Key Binding"

BINDING_HEADER_OUTFITTER_TITLE = Outfitter.cTitle
BINDING_NAME_OUTFITTER_OUTFIT = "Open Outfitter"

BINDING_NAME_OUTFITTER_OUTFIT1  = "Outfit 1"
BINDING_NAME_OUTFITTER_OUTFIT2  = "Outfit 2"
BINDING_NAME_OUTFITTER_OUTFIT3  = "Outfit 3"
BINDING_NAME_OUTFITTER_OUTFIT4  = "Outfit 4"
BINDING_NAME_OUTFITTER_OUTFIT5  = "Outfit 5"
BINDING_NAME_OUTFITTER_OUTFIT6  = "Outfit 6"
BINDING_NAME_OUTFITTER_OUTFIT7  = "Outfit 7"
BINDING_NAME_OUTFITTER_OUTFIT8  = "Outfit 8"
BINDING_NAME_OUTFITTER_OUTFIT9  = "Outfit 9"
BINDING_NAME_OUTFITTER_OUTFIT10 = "Outfit 10"

BINDING_NAME_OUTFITTER_ENABLEAUTOMATION = "Enable automatic changes"
BINDING_NAME_OUTFITTER_DISABLEAUTOMATION = "Disable automatic changes"

Outfitter.cShow = "Show"
Outfitter.cHide = "Hide"
Outfitter.cDontChange = "Don't change"

Outfitter.cHelm = "Helm"
Outfitter.cCloak = "Cloak"
Outfitter.cPlayerTitle = "Title"

Outfitter.cMore = "More"

Outfitter.cAutomation = "Automation"

Outfitter.cDisableOutfit = "Disable"
Outfitter.cDisableAlways = "Always"
Outfitter.cDisableOutfitInBG = "In Battlegrounds"
Outfitter.cDisableOutfitInCombat = "Disable while in combat"
Outfitter.cDisableOutfitInAQ40 = "In Temple of Ahn'Qiraj"
Outfitter.cDisableOutfitInNaxx = "In Naxxramas"
Outfitter.cDisabledOutfitName = "%s (Disabled)"

Outfitter.cOutfitBar = "Outfit Bar"
Outfitter.cShowInOutfitBar = "Show in outfit bar"
Outfitter.cChangeIcon = "Choose icon..."

Outfitter.cMinimapButtonTitle = "Outfitter Minimap Button"
Outfitter.cMinimapButtonDescription = "Click to select a different outfit or drag to re-position this button."

Outfitter.cClassName = {}
Outfitter.cClassName.DRUID = "Druid"
Outfitter.cClassName.HUNTER = "Hunter"
Outfitter.cClassName.MAGE = "Mage"
Outfitter.cClassName.PALADIN = "Paladin"
Outfitter.cClassName.PRIEST = "Priest"
Outfitter.cClassName.ROGUE = "Rogue"
Outfitter.cClassName.SHAMAN = "Shaman"
Outfitter.cClassName.WARLOCK = "Warlock"
Outfitter.cClassName.WARRIOR = "Warrior"
Outfitter.cClassName.DEATHKNIGHT = "Death Knight"

Outfitter.cBattleStance = "Battle Stance"
Outfitter.cDefensiveStance = "Defensive Stance"
Outfitter.cBerserkerStance = "Berserker Stance"

Outfitter.cWarriorBattleStance = "Warrior: Battle Stance"
Outfitter.cWarriorDefensiveStance = "Warrior: Defensive Stance"
Outfitter.cWarriorBerserkerStance = "Warrior: Berserker Stance"

Outfitter.cDruidCasterForm = "Druid: Caster Form"
Outfitter.cDruidBearForm = "Druid: Bear Form"
Outfitter.cDruidCatForm = "Druid: Cat Form"
Outfitter.cDruidAquaticForm = "Druid: Aquatic Form"
Outfitter.cDruidTravelForm = "Druid: Travel Form"
Outfitter.cDruidMoonkinForm = "Druid: Moonkin Form"
Outfitter.cDruidFlightForm = "Druid: Flight Form"
Outfitter.cDruidSwiftFlightForm = "Druid: Swift Flight Form"
Outfitter.cDruidTreeOfLifeForm = "Druid: Tree of Life"
Outfitter.cDruidProwl = "Druid: Prowl"
Outfitter.cProwl = "Prowl"

Outfitter.cPriestShadowform = "Priest: Shadowform"

Outfitter.cRogueStealth = "Rogue: Stealth"
Outfitter.cLockpickingOutfit = "Rogue: Lockpicking"

Outfitter.cShamanGhostWolf = "Shaman: Ghost Wolf"

Outfitter.cHunterMonkey = "Hunter: Monkey"
Outfitter.cHunterHawk =  "Hunter: Hawk"
Outfitter.cHunterCheetah =  "Hunter: Cheetah"
Outfitter.cHunterPack =  "Hunter: Pack"
Outfitter.cHunterBeast =  "Hunter: Beast"
Outfitter.cHunterWild =  "Hunter: Wild"
Outfitter.cHunterViper = "Hunter: Viper"
Outfitter.cHunterDragonhawk = "Hunter: Dragonhawk"
Outfitter.cHunterFeignDeath = "Hunter: Feign Death"

Outfitter.cMageEvocate = "Mage: Evocate"

Outfitter.cDeathknightBlood = "Deathknight: Blood Presence"
Outfitter.cDeathknightFrost = "Deathknight: Frost Presence"
Outfitter.cDeathknightUnholy = "Deathknight: Unholy Presence"

Outfitter.cCompleteCategoryDescription = "Complete outfits have all slots specified.  When these outfits are equipped all other outfits will automatically be unequipped."
Outfitter.cAccessoryCategoryDescription = "Accessory outfits have some, but not all, slots specified.  You can equip as many accessory outfits at a time as you like."
Outfitter.cOddsNEndsCategoryDescription = "Odds 'n ends is a list of items which you haven't used in any of your outfits.  This may be useful in ensuring that you're using all of your items or that you're not carrying around excess baggage."

Outfitter.cRebuildOutfitFormat = "Rebuild for %s"
Outfitter.cRebuildFor = "Rebuild for..."

Outfitter.cSlotEnableTitle = "Slot Enable"
Outfitter.cSlotEnableDescription = "Select this if you want the item in this slot to be equipped when changing to the selected outfit.  If not selected then this slot will not be modified when changing to the selected outfit."

Outfitter.cFinger0SlotName = "First Finger"
Outfitter.cFinger1SlotName = "Second Finger"

Outfitter.cTrinket0SlotName = "First Trinket"
Outfitter.cTrinket1SlotName = "Second Trinket"

Outfitter.cOutfitCategoryTitle = "Category"
Outfitter.cBankCategoryTitle = "Bank"
Outfitter.cDepositToBank = "Deposit all items to bank"
Outfitter.cDepositUniqueToBank = "Deposit unique items to bank"
Outfitter.cDepositOthersToBank = "Deposit other outfits to bank"
Outfitter.cWithdrawFromBank = "Withdraw items from bank"
Outfitter.cWithdrawOthersFromBank = "Withdraw other outfits from bank"

Outfitter.cMissingItemsLabel = "Missing items: "
Outfitter.cBankedItemsLabel = "Banked items: "

Outfitter.cResistCategory = "Resistances"
Outfitter.cTradeCategory = "Skills"

Outfitter.cTankPoints = "TankPoints"
Outfitter.cCustom = "Custom"

Outfitter.cScriptFormat = "Script (%s)"
Outfitter.cScriptSettings = "Settings..."
Outfitter.cNoScript = "None"
Outfitter.cDisableScript = "Disable"
Outfitter.cDisableIn = "Disable more"
Outfitter.cEditScriptTitle = "Script for %s outfit"
Outfitter.cEditScriptEllide = "Custom..."
Outfitter.cEventsLabel = "Events:"
Outfitter.cScriptLabel = "Script:"
Outfitter.cSetCurrentItems = "Update to current items"
Outfitter.cConfirmSetCurrentMsg = "Are you sure you want to update %s to use the currently equipped items? Note: Only slots currently enabled in the outfit will be updated -- you can turn on additional slots afterwards"
Outfitter.cSetCurrent = "Update"
Outfitter.cTyping = "Typing..."
Outfitter.cScriptErrorFormat = "Error at line %d: %s"
Outfitter.cExtractErrorFormat = "%[string \"Outfit Script\"%]:(%d+):(.*)"
Outfitter.cPresetScript = "Preset script:"
Outfitter.cCustomScript = "Custom"
Outfitter.cSettings = "Settings"
Outfitter.cSource = "Source"
Outfitter.cInsertFormat = "<- %s"

Outfitter.cNone = "None"
Outfitter.cTooltipMultibuffSeparator1 = " and "
Outfitter.cTooltipMultibuffSeparator2 = " / "
Outfitter.cNoScriptSettings = "There are no settings for this script."
Outfitter.cMissingItemsSeparator = ", "
Outfitter.cUnequipOthers = "On equip, unequip other Accessory outfits"

Outfitter.cConfirmResetMsg = "Are you sure you want to reset Outfitter on this character?  All outfits will be deleted and the default outfits re-created."
Outfitter.cReset = "Reset"

Outfitter.cIconFilterLabel = "Search:"
Outfitter.cIconSetLabel = "Icons:"

Outfitter.cCantReloadUI = "You must completely restart WoW to upgrade to this version of Outfitter"
Outfitter.cChooseIconTitle = "Choose an icon for the %s outfit"
Outfitter.cOutfitterDecides = "Outfitter will choose an icon for you"

Outfitter.cSuggestedIcons = "Suggested/equipped icons"
Outfitter.cSpellbookIcons = "Your Spellbook"
Outfitter.cYourItemIcons = "Your bags"
Outfitter.cEveryIcon = "All icons"
Outfitter.cItemIcons = "All icons (items only)"
Outfitter.cAbilityIcons = "All icons (spells only)"

Outfitter.cRequiresLockpicking = "Requires Lockpicking"
Outfitter.cUseTooltipLineFormat = "^Use:.*"
Outfitter.cUseDurationTooltipLineFormat = "^Use:.*for (%d+) sec"
Outfitter.cUseDurationTooltipLineFormat2 = "^Use:.*Lasts (%d+) sec"

Outfitter.cOutfitBarSizeLabel = "Size"
Outfitter.cOutfitBarSmallSizeLabel = "Small"
Outfitter.cOutfitBarLargeSizeLabel = "Large"
Outfitter.cOutfitBarAlphaLabel = "Alpha"
Outfitter.cOutfitBarCombatAlphaLabel = "Combat Alpha"
Outfitter.cOutfitBarVerticalLabel = "Vertical"
Outfitter.cOutfitBarLockPositionLabel = "Lock Position"
Outfitter.cOutfitBarHideBackgroundLabel = "Hide Background"

Outfitter.cPositionLockedError = "The outfit bar can't be moved because you've locked its position"

Outfitter.cMustBeAtBankError = "You must have your bank open to generate a missing items report"
Outfitter.cMissingItemReportIntro = "Missing items (note that a missing item will be listed multiple times if it was used by multiple outfits):"
Outfitter.cNoMissingItems = "No items are missing"

Outfitter.cAutoChangesDisabled = "Automated changes are now disabled"
Outfitter.cAutoChangesEnabled = "Automated changes are now enabled"

-- OutfitterFu strings

Outfitter.cFuHint = "Left-click to toggle Outfitter window."
Outfitter.cFuHideMissing = "Hide missing"
Outfitter.cFuHideMissingDesc = "Hide outfits with missing items."
Outfitter.cFuRemovePrefixes = "Remove prefixes"
Outfitter.cFuRemovePrefixesDesc = "Remove outfit name prefixes to shorten the text displayed in FuBar."
Outfitter.cFuMaxTextLength = "Max text length"
Outfitter.cFuMaxTextLengthDesc = "The maximum length of the text displayed in FuBar."
Outfitter.cFuHideMinimapButton = "Hide minimap button"
Outfitter.cFuHideMinimapButtonDesc = "Hide Outfitter's minimap button."
Outfitter.cFuInitializing = "Initializing"

Outfitter.cStoreOnServer = "Store outfit on server"
Outfitter.cStoreOnServerOnDescription = "Turn off to remove this outfit from the server and store it locally instead.  It will no longer be available from other computers."
Outfitter.cStoreOnServerOffDescription = "Turn on to store this outfit on the server so that it's available from any computer.  You may only store 10 outfits on the server."
Outfitter.cTooManyServerOutfits = "You cannot store more than %d outfits on the server."

Outfitter.cCantSetIcon = "Equipment Manager doesn't have the ability to change an icon without also updating the gear.  You should equip this outfit first before changing its icon.  If you continue anyhow, some of your item selections for this outfit will be changed to your currently equipped gear."
Outfitter.cChangeIcon = "Change Icon"
